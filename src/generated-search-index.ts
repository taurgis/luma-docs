// This file is auto-generated by scripts/generate-search-index.js
// Do not edit manually - changes will be overwritten during build

export interface SearchableItem {
  path: string;
  pageTitle: string;
  heading: string;
  headingId: string | null;
  content: string;
  description?: string;
}

export const GENERATED_SEARCH_INDEX: SearchableItem[] = [
  {
    "path": "/",
    "pageTitle": "Welcome to Luma Docs",
    "heading": "Welcome to Luma Docs",
    "headingId": "welcome-to-luma-docs",
    "content": "Welcome to Luma Docs Luma Docs is a modern, fast, and beautiful documentation platform built with React, MDX, and Vite. It provides a seamless experience for both content creators and readers.",
    "description": "A modern documentation platform built with React and MDX. Features automatic routing, static generation, and GitHub Pages deployment."
  },
  {
    "path": "/",
    "pageTitle": "Welcome to Luma Docs",
    "heading": "Features",
    "headingId": "features",
    "content": "Features MDX Support: Write content in MDX format with the full power of React components Automatic Routing: Pages are automatically added to routes based on file structure Fast Static Generation: Built with Vite React SSG for lightning-fast performance GitHub Pages Ready: Optimized for deployment o",
    "description": ""
  },
  {
    "path": "/",
    "pageTitle": "Welcome to Luma Docs",
    "heading": "Getting Started",
    "headingId": "getting-started",
    "content": "Getting Started To get started with Luma Docs, simply create MDX files in the directory. Each file will automatically become a page in your documentation site.",
    "description": ""
  },
  {
    "path": "/",
    "pageTitle": "Welcome to Luma Docs",
    "heading": "File Structure",
    "headingId": "file-structure",
    "content": "File Structure",
    "description": ""
  },
  {
    "path": "/",
    "pageTitle": "Welcome to Luma Docs",
    "heading": "Frontmatter",
    "headingId": "frontmatter",
    "content": "Frontmatter Each MDX file can include frontmatter to specify metadata: : The page title (used in navigation and SEO) : Page description for SEO : Sort order for navigation (lower numbers appear first)",
    "description": ""
  },
  {
    "path": "/",
    "pageTitle": "Welcome to Luma Docs",
    "heading": "Next Steps",
    "headingId": "next-steps",
    "content": "Next Steps Create your first MDX page Customize the navigation structure Deploy to GitHub Pages Welcome to the future of documentation!",
    "description": ""
  },
  {
    "path": "/components/",
    "pageTitle": "Component Showcase",
    "heading": "Code Components",
    "headingId": "code-components",
    "content": "Code Components",
    "description": ""
  },
  {
    "path": "/components/",
    "pageTitle": "Component Showcase",
    "heading": "Code Fences",
    "headingId": "code-fences",
    "content": "Code Fences Standard fenced code blocks ( tsx function HelloWorld() { const message = \"Hello, Luma Docs!\"; return <h1>{message}</h1>; } // Invoke to avoid unused var lint complaint in MDX processing context HelloWorld(); ```",
    "description": ""
  },
  {
    "path": "/components/",
    "pageTitle": "Component Showcase",
    "heading": "Inline Code",
    "headingId": "inline-code",
    "content": "Inline Code Use the <Code>InlineCode</Code> component for short code snippets within text. You can also use <Kbd>Ctrl</Kbd> + <Kbd>C</Kbd> to show keyboard shortcuts.",
    "description": ""
  },
  {
    "path": "/components/",
    "pageTitle": "Component Showcase",
    "heading": "Code Tabs",
    "headingId": "code-tabs",
    "content": "Code Tabs The component is perfect for showing the same functionality in different languages: <CodeTabs tabs={[ { label: \"React\", language: \"tsx\", code: , }, { label: \"Vue\", language: \"vue\", code: , }, { label: \"Svelte\", language: \"svelte\", code: , }, ]} groupId=\"button-examples\" />",
    "description": ""
  },
  {
    "path": "/components/",
    "pageTitle": "Component Showcase",
    "heading": "Content Components",
    "headingId": "content-components",
    "content": "Content Components",
    "description": ""
  },
  {
    "path": "/components/",
    "pageTitle": "Component Showcase",
    "heading": "Callouts",
    "headingId": "callouts",
    "content": "Callouts Callouts help highlight important information with semantic colors and icons: <Callout type=\"info\" title=\"Information\"> This is an informational callout. Use it to provide additional context or helpful tips to your readers. </Callout> <Callout type=\"warning\" title=\"Warning\"> This is a warni",
    "description": ""
  },
  {
    "path": "/components/",
    "pageTitle": "Component Showcase",
    "heading": "Collapsibles",
    "headingId": "collapsibles",
    "content": "Collapsibles Collapsible sections help organize content and improve page readability: <Collapsible title=\"Basic Usage\" defaultOpen> This collapsible is open by default. You can put any content here, including other components, code blocks, or formatted text. <ul> <li>List items work great</li> <li>M",
    "description": ""
  },
  {
    "path": "/components/",
    "pageTitle": "Component Showcase",
    "heading": "Typography Components",
    "headingId": "typography-components",
    "content": "Typography Components",
    "description": ""
  },
  {
    "path": "/components/",
    "pageTitle": "Component Showcase",
    "heading": "Headings",
    "headingId": "headings",
    "content": "Headings The typography system provides consistent styling for all heading levels:",
    "description": ""
  },
  {
    "path": "/components/",
    "pageTitle": "Component Showcase",
    "heading": "H1: Main Page Title",
    "headingId": "h1-main-page-title",
    "content": "H1: Main Page Title",
    "description": "Explore the enhanced component library available in Luma Docs, including code blocks, callouts, collapsibles, and more."
  },
  {
    "path": "/components/",
    "pageTitle": "Component Showcase",
    "heading": "H2: Major Section Header",
    "headingId": "h2-major-section-header",
    "content": "H2: Major Section Header",
    "description": ""
  },
  {
    "path": "/components/",
    "pageTitle": "Component Showcase",
    "heading": "H3: Subsection Header",
    "headingId": "h3-subsection-header",
    "content": "H3: Subsection Header",
    "description": ""
  },
  {
    "path": "/components/",
    "pageTitle": "Component Showcase",
    "heading": "H4: Minor Section Header",
    "headingId": "h4-minor-section-header",
    "content": "H4: Minor Section Header",
    "description": ""
  },
  {
    "path": "/components/",
    "pageTitle": "Component Showcase",
    "heading": "H5: Small Section Header",
    "headingId": "h5-small-section-header",
    "content": "H5: Small Section Header",
    "description": ""
  },
  {
    "path": "/components/",
    "pageTitle": "Component Showcase",
    "heading": "H6: Smallest Header",
    "headingId": "h6-smallest-header",
    "content": "H6: Smallest Header",
    "description": ""
  },
  {
    "path": "/components/",
    "pageTitle": "Component Showcase",
    "heading": "Text Styles",
    "headingId": "text-styles",
    "content": "Text Styles Bold text and italic text are supported, along with and links. > This is a blockquote. Use it for highlighting quotes, testimonials, or important excerpts from other sources.",
    "description": ""
  },
  {
    "path": "/components/",
    "pageTitle": "Component Showcase",
    "heading": "Interactive Examples",
    "headingId": "interactive-examples",
    "content": "Interactive Examples",
    "description": ""
  },
  {
    "path": "/components/",
    "pageTitle": "Component Showcase",
    "heading": "Combining Components",
    "headingId": "combining-components",
    "content": "Combining Components You can combine multiple components to create rich, interactive documentation: <Collapsible title=\"Complete API Example\" intent=\"info\" defaultOpen> <Callout type=\"tip\" title=\"Best Practice\"> Always validate your API inputs and handle errors gracefully. </Callout> <CodeTabs tabs=",
    "description": ""
  },
  {
    "path": "/components/",
    "pageTitle": "Component Showcase",
    "heading": "Usage",
    "headingId": "usage",
    "content": "Usage Import any of these components in your MDX files: All components are fully typed with TypeScript and designed to work seamlessly together. They follow consistent design patterns and accessibility best practices.",
    "description": ""
  },
  {
    "path": "/getting-started/",
    "pageTitle": "Getting Started",
    "heading": "Getting Started",
    "headingId": "getting-started",
    "content": "Getting Started This guide will help you get up and running with Luma Docs quickly.",
    "description": "Learn how to get started with Luma Docs - installation, development, and deployment guide"
  },
  {
    "path": "/getting-started/",
    "pageTitle": "Getting Started",
    "heading": "SEO Features",
    "headingId": "seo-features",
    "content": "SEO Features Luma Docs now includes comprehensive SEO support through frontmatter metadata. You can specify SEO attributes in your MDX files: You can also override SEO settings directly in your MDX content using the component: <SEO title=\"Custom Page Title Override\" description=\"This description wil",
    "description": ""
  },
  {
    "path": "/getting-started/",
    "pageTitle": "Getting Started",
    "heading": "Installation",
    "headingId": "installation",
    "content": "Installation Clone or download the Luma Docs template Install dependencies: Start the development server:",
    "description": ""
  },
  {
    "path": "/getting-started/",
    "pageTitle": "Getting Started",
    "heading": "Creating Content",
    "headingId": "creating-content",
    "content": "Creating Content Content is written in MDX format, which allows you to combine Markdown with React components.",
    "description": ""
  },
  {
    "path": "/getting-started/",
    "pageTitle": "Getting Started",
    "heading": "Basic Markdown",
    "headingId": "basic-markdown",
    "content": "Basic Markdown You can use all standard Markdown features: Bold text Italic text Links",
    "description": ""
  },
  {
    "path": "/getting-started/",
    "pageTitle": "Getting Started",
    "heading": "Code Blocks",
    "headingId": "code-blocks",
    "content": "Code Blocks",
    "description": ""
  },
  {
    "path": "/getting-started/",
    "pageTitle": "Getting Started",
    "heading": "React Components",
    "headingId": "react-components",
    "content": "React Components You can also use React components directly in your MDX:",
    "description": ""
  },
  {
    "path": "/getting-started/",
    "pageTitle": "Getting Started",
    "heading": "Navigation",
    "headingId": "navigation",
    "content": "Navigation Navigation is automatically generated based on your file structure and frontmatter. Pages are sorted by the field in frontmatter, then alphabetically.",
    "description": ""
  },
  {
    "path": "/getting-started/",
    "pageTitle": "Getting Started",
    "heading": "Deployment",
    "headingId": "deployment",
    "content": "Deployment To deploy to GitHub Pages: Build the site: Deploy the folder to your GitHub Pages branch The site is configured to work with GitHub Pages subfolder deployments (e.g., ).",
    "description": ""
  },
  {
    "path": "/guides/",
    "pageTitle": "Guides",
    "heading": "Guides",
    "headingId": "guides",
    "content": "Guides Welcome to the Luma Docs guides section. Here you'll find comprehensive tutorials and guides to help you make the most of your documentation site.",
    "description": "Comprehensive guides for using Luma Docs"
  },
  {
    "path": "/guides/",
    "pageTitle": "Guides",
    "heading": "Available Guides",
    "headingId": "available-guides",
    "content": "Available Guides Advanced Features - Learn about advanced features and customization Deployment - Different deployment options and strategies Customization - How to customize the look and feel",
    "description": ""
  },
  {
    "path": "/guides/",
    "pageTitle": "Guides",
    "heading": "What You'll Learn",
    "headingId": "what-youll-learn",
    "content": "What You'll Learn In these guides, you'll discover: How to organize your content effectively Advanced MDX features and React component integration Customization options for styling and layout Best practices for documentation SEO optimization techniques",
    "description": ""
  },
  {
    "path": "/guides/",
    "pageTitle": "Guides",
    "heading": "Community",
    "headingId": "community",
    "content": "Community Have questions or want to contribute? Check out our community resources and contribution guidelines.",
    "description": ""
  },
  {
    "path": "/guides/advanced/",
    "pageTitle": "Advanced Features",
    "heading": "Advanced Features",
    "headingId": "advanced-features",
    "content": "Advanced Features Luma Docs comes with several advanced features that make it powerful and flexible for documentation sites.",
    "description": "Learn about advanced features and capabilities of Luma Docs including search, routing, and customization"
  },
  {
    "path": "/guides/advanced/",
    "pageTitle": "Advanced Features",
    "heading": "MDX Components",
    "headingId": "mdx-components",
    "content": "MDX Components You can create custom React components and use them in your MDX files. This allows for rich, interactive documentation.",
    "description": ""
  },
  {
    "path": "/guides/advanced/",
    "pageTitle": "Advanced Features",
    "heading": "Example: Callout Component",
    "headingId": "example-callout-component",
    "content": "Example: Callout Component You could create a callout component like this:",
    "description": ""
  },
  {
    "path": "/guides/advanced/",
    "pageTitle": "Advanced Features",
    "heading": "Code Highlighting",
    "headingId": "code-highlighting",
    "content": "Code Highlighting Code blocks are automatically highlighted using Prism.js with support for many languages:",
    "description": ""
  },
  {
    "path": "/guides/advanced/",
    "pageTitle": "Advanced Features",
    "heading": "Table of Contents",
    "headingId": "table-of-contents",
    "content": "Table of Contents The table of contents is automatically generated from your headings (h2 and h3) and appears in the right sidebar on desktop.",
    "description": ""
  },
  {
    "path": "/guides/advanced/",
    "pageTitle": "Advanced Features",
    "heading": "Search",
    "headingId": "search",
    "content": "Search The built-in search functionality indexes all your content and provides fast, client-side search results.",
    "description": ""
  },
  {
    "path": "/guides/advanced/",
    "pageTitle": "Advanced Features",
    "heading": "Performance",
    "headingId": "performance",
    "content": "Performance Static Generation: All pages are pre-rendered at build time Code Splitting: JavaScript is automatically split into smaller chunks Optimized Assets: Images and other assets are optimized for fast loading Minimal Runtime: Very little JavaScript is required for the site to function",
    "description": ""
  },
  {
    "path": "/guides/advanced/",
    "pageTitle": "Advanced Features",
    "heading": "SEO Optimization",
    "headingId": "seo-optimization",
    "content": "SEO Optimization Automatic sitemap generation Meta tags from frontmatter Structured data markup Fast loading times These features combine to create a documentation platform that's both powerful for authors and fast for readers.",
    "description": ""
  },
  {
    "path": "/seo-examples/",
    "pageTitle": "SEO Examples",
    "heading": "SEO Examples",
    "headingId": "seo-examples",
    "content": "SEO Examples This page demonstrates all the SEO features available in Luma Docs.",
    "description": "Comprehensive examples of SEO features in Luma Docs including frontmatter metadata and inline SEO components"
  },
  {
    "path": "/seo-examples/",
    "pageTitle": "SEO Examples",
    "heading": "Frontmatter SEO Attributes",
    "headingId": "frontmatter-seo-attributes",
    "content": "Frontmatter SEO Attributes You can set SEO metadata in your MDX file's frontmatter:",
    "description": ""
  },
  {
    "path": "/seo-examples/",
    "pageTitle": "SEO Examples",
    "heading": "Inline SEO Override",
    "headingId": "inline-seo-override",
    "content": "Inline SEO Override You can also override SEO metadata for specific sections using the component: <SEO title=\"Special Section - SEO Examples\" description=\"This section has custom SEO metadata that overrides the frontmatter\" keywords=\"custom, override, section, special\" ogType=\"article\" twitterCard=\"",
    "description": ""
  },
  {
    "path": "/seo-examples/",
    "pageTitle": "SEO Examples",
    "heading": "Available SEO Fields",
    "headingId": "available-seo-fields",
    "content": "Available SEO Fields",
    "description": ""
  },
  {
    "path": "/seo-examples/",
    "pageTitle": "SEO Examples",
    "heading": "Basic Meta Tags",
    "headingId": "basic-meta-tags",
    "content": "Basic Meta Tags - Page title (used in and Open Graph) - Meta description for search engines - Comma-separated keywords - Content author - Canonical URL for the page - Robots directive (or use )",
    "description": ""
  },
  {
    "path": "/seo-examples/",
    "pageTitle": "SEO Examples",
    "heading": "Open Graph Meta Tags",
    "headingId": "open-graph-meta-tags",
    "content": "Open Graph Meta Tags - \"website\" or \"article\" - URL to Open Graph image",
    "description": ""
  },
  {
    "path": "/seo-examples/",
    "pageTitle": "SEO Examples",
    "heading": "Twitter Card Meta Tags",
    "headingId": "twitter-card-meta-tags",
    "content": "Twitter Card Meta Tags - \"summary\" or \"summarylargeimage\" - Twitter handle of content creator - Twitter handle of website",
    "description": ""
  },
  {
    "path": "/seo-examples/",
    "pageTitle": "SEO Examples",
    "heading": "Article-Specific Meta Tags",
    "headingId": "article-specific-meta-tags",
    "content": "Article-Specific Meta Tags - ISO 8601 publication date - ISO 8601 modification date - Article section/category - Array of tags (can also be comma-separated string)",
    "description": ""
  },
  {
    "path": "/seo-examples/",
    "pageTitle": "SEO Examples",
    "heading": "How It Works",
    "headingId": "how-it-works",
    "content": "How It Works Route Generation: The script extracts SEO metadata from frontmatter SEO Component: The component renders all meta tags using 's Static Generation: During SSG build, all meta tags are included in the static HTML Dynamic Override: Inline components can override frontmatter values",
    "description": ""
  },
  {
    "path": "/seo-examples/",
    "pageTitle": "SEO Examples",
    "heading": "SEO Best Practices",
    "headingId": "seo-best-practices",
    "content": "SEO Best Practices",
    "description": ""
  },
  {
    "path": "/seo-examples/",
    "pageTitle": "SEO Examples",
    "heading": "Titles",
    "headingId": "titles",
    "content": "Titles Keep titles under 60 characters Include primary keywords Make them unique and descriptive",
    "description": ""
  },
  {
    "path": "/seo-examples/",
    "pageTitle": "SEO Examples",
    "heading": "Descriptions",
    "headingId": "descriptions",
    "content": "Descriptions Keep descriptions between 120-160 characters Include a compelling call-to-action Summarize the page content accurately",
    "description": ""
  },
  {
    "path": "/seo-examples/",
    "pageTitle": "SEO Examples",
    "heading": "Open Graph Images",
    "headingId": "open-graph-images",
    "content": "Open Graph Images Use 1200x630 pixel images Include text overlays for better social sharing Ensure images are relevant to content",
    "description": ""
  },
  {
    "path": "/seo-examples/",
    "pageTitle": "SEO Examples",
    "heading": "Keywords",
    "headingId": "keywords",
    "content": "Keywords Use 3-10 relevant keywords Avoid keyword stuffing Focus on user intent",
    "description": ""
  },
  {
    "path": "/seo-examples/",
    "pageTitle": "SEO Examples",
    "heading": "Structured Data",
    "headingId": "structured-data",
    "content": "Structured Data Luma Docs automatically generates JSON-LD structured data Article pages get Article schema Website pages get WebPage schema",
    "description": ""
  },
  {
    "path": "/seo-examples/",
    "pageTitle": "SEO Examples",
    "heading": "Generated Meta Tags",
    "headingId": "generated-meta-tags",
    "content": "Generated Meta Tags This page generates the following types of meta tags: Basic Meta Tags: title, description, keywords, author, robots Open Graph: og:title, og:description, og:type, og:image, og:url Twitter Cards: twitter:card, twitter:title, twitter:description, twitter:image Article Meta: article",
    "description": ""
  }
];
