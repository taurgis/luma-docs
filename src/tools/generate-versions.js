import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

function isDirectory(p) {
  try { return fs.statSync(p).isDirectory(); } catch { return false; }
}

function collectVersions(baseDir) {
  if (!isDirectory(baseDir)) { return []; }
  return fs.readdirSync(baseDir)
    .filter(name => !name.startsWith('.') && isDirectory(path.join(baseDir, name)))
    // Only include folders that match v<digit>
    .filter(name => /^v\d/.test(name))
    .sort();
}

function writeFile(outPath, content) {
  fs.writeFileSync(outPath, content, 'utf8');
  console.log(`Generated versions file: ${outPath}`);
}

function generate() {
  const versionsDir = path.join(__dirname, '../../versions');
  const versions = collectVersions(versionsDir); // e.g. ['v1.0', 'v1.1']
  const outputPath = path.join(__dirname, '../generated-versions.ts');

  const file = `// Auto-generated by tools/generate-versions.js
// Do not edit manually.
export const archivedVersions = ${JSON.stringify(versions, null, 2)} as const;
export type ArchivedVersion = typeof archivedVersions[number];
`;
  writeFile(outputPath, file);
}

try {
  generate();
} catch (e) {
  console.error('Failed generating versions metadata', e);
  process.exit(1);
}
